import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class MaxFinder {

    private final int nThreads, length, width, depth;
    private final int[][][] data;
    private final CyclicBarrier barrier;
    private int[] sums;
    private int max;

    /*
     * Worker constructor takes only one parameter int r, which is his associated row number
     * A worker is responsible of the calculation of the sum of each 2D-Array with row == r + nThread * round; with round >= 0
     *
     * Run should compute the sum of a 2D-array and store the result in sums[] then wait for the cyclic barrier to get the result
     * And restart computing nThreads further
     */
    class Worker implements Runnable {

        int myRow;

        Worker(int row) {
            myRow = row;
        }

        @Override
        public void run() {
            int currentRow = myRow;
            while (currentRow < length) {
                sums[myRow] = 0; // Reset sum from last array
                for (int[] j : data[currentRow]) { // Compute the 2D array's sum
                    for (int k : j) {
                        sums[myRow] += k;
                    }
                }

                try {
                    barrier.await();
                } catch (InterruptedException | BrokenBarrierException ex) {
                    return;
                }
                currentRow += nThreads;
            }
        }

    }


    /*
     *
     * Initialize all the instance variable and start the right amount of Threads
     *
     */
    private MaxFinder(int[][][] matrix, int nThreads) throws InterruptedException {

        data = matrix;
        this.nThreads = nThreads;
        length = data.length;
        width = data[0].length;
        depth = data[0][0].length;
        sums = new int[nThreads];

        Runnable barrierAction = () -> {
            int currentMax = Integer.MIN_VALUE;
            for (int i : sums) // Find the highest sum in sums
                max = Math.max(max, i);
        };

        barrier = new CyclicBarrier(nThreads, barrierAction);

        Thread[] threads = new Thread[nThreads];
        for (int i = 0; i < nThreads; i++) {
            threads[i] = new Thread(new Worker(i));
            threads[i].start();
        }

        // wait until done
        for (Thread thread : threads)
            thread.join();
    }

    /*
     * subSize is the length of the subarray
     * rowSize is the rowlength for all the array
     *
     */
    public static int getMaxSum(int[][][] matrix, int nThreads) {
        try {
            MaxFinder mf = new MaxFinder(matrix, nThreads);
            return mf.max;
        } catch (InterruptedException e) {
            return -1;
        }

    }
}
